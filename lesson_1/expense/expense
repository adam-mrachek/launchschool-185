#! /usr/bin/env ruby

require 'pg'
require 'io/console'
require 'pry'

CONNECTION = PG.connect(dbname: "expenses")

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command
    when 'list'
      @application.list_expenses
    when 'add'
      amount = arguments[0]
      memo = arguments[1]
      @application.add_expense(amount, memo)
    when 'search'
      query = arguments[0]
      @application.search_expenses(query)
    when 'delete'
      id = arguments[0]
      @application.delete_expense(id)
    when 'clear'
      @application.delete_all_expenses
    else
      show_help
    end
  end

  def show_help
    puts <<~HELP
      An expense recording system
    
      Commands:
    
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
      HELP
  end
end

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    result = @connection.exec(
      "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    )

    if result[0]["count"] == "0"
      sql = File.open('schema.sql', 'rb') { |file| file.read }
      @connection.exec(sql)
    end
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses;")
    if result.values.empty?
      puts "There are no expenses."
    else
      display_expenses(result)
    end
  end
  
  def add_expense(amount, memo)
    date = Date.today
  
    if amount && memo
      @connection.exec_params(
        "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);", [amount, memo, date]
      )
    else
      abort "You must provide an amount and memo."
    end
  end

  def search_expenses(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    fetch_sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @connection.exec_params(fetch_sql, [id])

    # binding.pry
    if result.values.empty?
      puts "There is no expense with the id '#{id}'."
    else
      delete_sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(delete_sql, [id])
      puts "The following expense has been deleted:"
      display_expenses(result)
    end
  end

  def delete_all_expenses
    puts "This will remove all expenses. Are you sure? (y/n)"
    response = $stdin.getch

    if response == 'y'
      @connection.exec("DELETE FROM expenses;")
      puts "All expenses have been deleted."
    end
  end

  private

  def display_expenses(result)
    result.each do |tuple|
      columns = [
        tuple["id"].rjust(3),
        tuple["created_on"].rjust(10),
        tuple["amount"].rjust(12),
        tuple["memo"]
      ]
    
      puts columns.join(" | ")
    end
    puts "------------------------------------------"

    total = result.field_values("amount").map(&:to_f).sum

    puts "Total #{total.to_s.rjust(25)}"
  end
end

CLI.new.run(ARGV)